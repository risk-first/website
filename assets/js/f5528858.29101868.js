"use strict";(self.webpackChunkrf_website=self.webpackChunkrf_website||[]).push([[7826],{97965:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var s=t(74848),n=t(28453);const r={title:"Complexity Risk",description:"Risks caused by the weight of complexity in the systems we create, and their resistance to change and comprehension.",slug:"/risks/Complexity-Risk",featured:{class:"c",element:'<risk class="complexity" />'},sidebar_position:5,tags:["Risks","Refactoring","Complexity Risk","Abstraction"],part_of:"Operational Risk"},o=void 0,a={id:"risks/Complexity-Risk/Complexity-Risk",title:"Complexity Risk",description:"Risks caused by the weight of complexity in the systems we create, and their resistance to change and comprehension.",source:"@site/docs/risks/Complexity-Risk/Complexity-Risk.md",sourceDirName:"risks/Complexity-Risk",slug:"/risks/Complexity-Risk",permalink:"/risks/Complexity-Risk",draft:!1,unlisted:!1,editUrl:"https://github.com/risk-first/website/blob/master/docs/risks/Complexity-Risk/Complexity-Risk.md",tags:[{inline:!1,label:"Risks",permalink:"/tags/Risks"},{inline:!1,label:"Refactoring",permalink:"/tags/Refactoring"},{inline:!1,label:"Complexity Risk",permalink:"/tags/Complexity-Risk"},{inline:!1,label:"Abstraction",permalink:"/tags/Abstraction"}],version:"current",sidebarPosition:5,frontMatter:{title:"Complexity Risk",description:"Risks caused by the weight of complexity in the systems we create, and their resistance to change and comprehension.",slug:"/risks/Complexity-Risk",featured:{class:"c",element:'<risk class="complexity" />'},sidebar_position:5,tags:["Risks","Refactoring","Complexity Risk","Abstraction"],part_of:"Operational Risk"},sidebar:"tutorialSidebar",previous:{title:"On Code",permalink:"/risks/On-Code"},next:{title:"Kolmogorov Complexity",permalink:"/risks/Kolmogorov-Complexity"}},l={},c=[{value:"Worked Example",id:"worked-example",level:2},{value:"Example Threats",id:"example-threats",level:2},{value:"1. Space and Time Complexity",id:"1-space-and-time-complexity",level:3},{value:"2. Memory Management",id:"2-memory-management",level:3},{value:"3. Protocols And Types",id:"3-protocols-and-types",level:3},{value:"4. Concurrency / Mutability",id:"4-concurrency--mutability",level:3},{value:"5. Networking / Security",id:"5-networking--security",level:3},{value:"6.  The Pursuit Of Perfection",id:"6--the-pursuit-of-perfection",level:3}];function h(e){const i={a:"a",admonition:"admonition",blockquote:"blockquote",em:"em",h2:"h2",h3:"h3",img:"img",p:"p",strong:"strong",...(0,n.R)(),...e.components},{RiskIntro:o}=i;return o||function(e,i){throw new Error("Expected "+(i?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("RiskIntro",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o,{fm:r}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.a,{href:"/tags/Complexity-Risk",children:"Complexity Risk"})," is the ",(0,s.jsx)(i.a,{href:"/tags/Risk",children:"risk"}),' to your project due to its underlying "complexity" - the amount of code, documentation, issues, features, different types of user and so on and, crucially, the ',(0,s.jsx)(i.a,{href:"/risks/Connectivity",children:"relationships between those elements"}),"."]}),"\n",(0,s.jsx)(i.p,{children:"Looking at the living world, society or software in general, we can see that -over time- complexity increases.  There is a trade-off wherein we can capture more resources, more value or more user requirements (respectively) through increasing complexity.  The downside of this is that complex systems are more brittle and harder to change."}),"\n",(0,s.jsx)(i.h2,{id:"worked-example",children:"Worked Example"}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.img,{alt:"Increasing the Complexity To Reduce Operational Risks",src:t(55315).A+"",width:"1329",height:"401"})}),"\n",(0,s.jsxs)(i.p,{children:["It's the early 2000s: your Pok\xe9mon website is becoming really popular and profitable and has a large, enthusiastic customer base.  But you're worried that you're carrying too much ",(0,s.jsx)(i.a,{href:"/tags/Operational-Risk",children:"Operational Risk"})," as the whole thing is run on a single server and database that you've rented from a hosting provider.  What if it goes down?  Or the disk crashes?   The provider isn't interested in helping you, so you hire ",(0,s.jsx)(i.a,{href:"/tags/Redundancy",children:"a second server and database"})," and work out a process for load balancing between the two of them.  You write scripts that keep the databases in sync and implement sticky sessions so that users only see their own version.  There are lots of corner cases you have to work through and it is a major headache."]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.img,{alt:"Increasing the Cost To Reduce Operational Risks",src:t(64576).A+"",width:"1366",height:"376"})}),"\n",(0,s.jsxs)(i.p,{children:["It's the early 2020s: your Pok\xe9mon website is becoming really popular and profitable but you're worried that you're carrying too much ",(0,s.jsx)(i.a,{href:"/tags/Operational-Risk",children:"Operational Risk"}),".  You're able to turn on some backup features, load balancing and increase the instances via the console provided by your Cloud Service Provider, handing off the ",(0,s.jsx)(i.a,{href:"/tags/Complexity-Risk",children:"Complexity Risk"})," to them at some expense.  As well as helping with ",(0,s.jsx)(i.a,{href:"/tags/Demand-Management",children:"Demand Management"}),", CSPs have allowed software developers to shift a lot of ",(0,s.jsx)(i.a,{href:"/tags/Complexity-Risk",children:"Complexity Risk"})," to them, the downsides being ",(0,s.jsx)(i.a,{href:"/tags/Funding-Risk",children:"cost"})," and ",(0,s.jsx)(i.a,{href:"/tags/Lock-In-Risk",children:"lock-in"}),"."]}),"\n",(0,s.jsx)(i.h2,{id:"example-threats",children:"Example Threats"}),"\n",(0,s.jsx)(i.h3,{id:"1-space-and-time-complexity",children:"1. Space and Time Complexity"}),"\n",(0,s.jsxs)(i.p,{children:["There is a whole branch of complexity theory devoted to how the software ",(0,s.jsx)(i.em,{children:"runs"}),", namely ",(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Big_O_notation",children:"Big O Complexity"}),"."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Threat"}),": Once running, an algorithm or data structure will consume space or runtime dependent on its performance characteristics, which may well have an impact on the ",(0,s.jsx)(i.a,{href:"/tags/Operational-Risk",children:"Operational Risk"})," of the software.  Using off-the-shelf data structures and algorithms helps, but you still need to know their performance characteristics."]}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.a,{href:"https://bigocheatsheet.com",children:"Big O Cheat Sheet"})," is a wonderful resource to investigate this further."]}),"\n",(0,s.jsx)(i.h3,{id:"2-memory-management",children:"2. Memory Management"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Threat"}),": Memory Management (and more generally, all resource management in software) is another place where ",(0,s.jsx)(i.a,{href:"/tags/Complexity-Risk",children:"Complexity Risk"})," hides:"]}),"\n",(0,s.jsxs)(i.blockquote,{children:["\n",(0,s.jsxs)(i.p,{children:['"Memory leaks are a common error in programming, especially when using languages that have no built in automatic garbage collection, such as C and C++." - ',(0,s.jsxs)(i.a,{href:"https://en.wikipedia.org/wiki/Memory_leak",children:["Memory Leak, ",(0,s.jsx)(i.em,{children:"Wikipedia"})]})]}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)",children:"Garbage Collectors"})," (as found in Javascript or Java) offer you the deal that they will mitigate the ",(0,s.jsx)(i.a,{href:"/tags/Complexity-Risk",children:"Complexity Risk"})," of you having to manage your own memory, but in return perhaps give you fewer guarantees about the ",(0,s.jsx)(i.em,{children:"performance"})," of your software.  Again, there are times when you can't accommodate this ",(0,s.jsx)(i.a,{href:"/tags/Operational-Risk",children:"Operational Risk"}),", but these are rare and usually only affect a small portion of an entire software-system."]}),"\n",(0,s.jsx)(i.h3,{id:"3-protocols-and-types",children:"3. Protocols And Types"}),"\n",(0,s.jsxs)(i.p,{children:["As we saw in ",(0,s.jsx)(i.a,{href:"/tags/Communication-Risk",children:"Communication Risk"}),", whenever two components of a software system need to interact, they have to establish a protocol for doing so."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Threat"}),": As systems become more complex, and the connectedness increases, it becomes harder to manage the risk around versioning protocols.  This becomes especially true when operating beyond the edge of the compiler's domain."]}),"\n",(0,s.jsxs)(i.p,{children:["Although type-checking helps mitigate ",(0,s.jsx)(i.a,{href:"/tags/Communication-Risk",children:"Communication Risk"}),', when software systems grow large it becomes hard to communicate intent and keep connectivity low.  You  can end up with "The Big Ball Of Mud":']}),"\n",(0,s.jsxs)(i.blockquote,{children:["\n",(0,s.jsxs)(i.p,{children:['"A big ball of mud is a software system that lacks a perceivable architecture. Although undesirable from a software engineering point of view, such systems are common in practice due to business pressures, developer turnover and code entropy. " - ',(0,s.jsxs)(i.a,{href:"https://en.wikipedia.org/wiki/Big_ball_of_mud",children:["Big Ball Of Mud, ",(0,s.jsx)(i.em,{children:"Wikipedia"})]})]}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:"4-concurrency--mutability",children:"4. Concurrency / Mutability"}),"\n",(0,s.jsxs)(i.p,{children:["Although modern languages include plenty of concurrency primitives (such as the ",(0,s.jsx)(i.a,{href:"https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/package-summary.html",children:"java.util.concurrent"})," libraries), concurrency is ",(0,s.jsx)(i.em,{children:"still"})," hard to get right."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Threat"}),": ",(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Race_condition",children:"Race conditions"})," and ",(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Deadlock",children:"Deadlocks"})," abound in over-complicated concurrency designs:  complexity issues are magnified by concurrency concerns, and are also hard to test and debug."]}),"\n",(0,s.jsxs)(i.p,{children:["Languages such as ",(0,s.jsx)(i.a,{href:"https://clojure.org",children:"Clojure"})," introduce ",(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Persistent_data_structure",children:"persistent collections"})," to alleviate concurrency issues.  The basic premise is that any time you want to ",(0,s.jsx)(i.em,{children:"change"})," the contents of a collection, you get given back a ",(0,s.jsx)(i.em,{children:"new collection"}),".  So, any collection instance is immutable once created.  The trade-off is again speed to mitigate ",(0,s.jsx)(i.a,{href:"/tags/Complexity-Risk",children:"Complexity Risk"}),"."]}),"\n",(0,s.jsxs)(i.p,{children:["An important lesson here is that choice of language can reduce complexity: and we'll come back to this in ",(0,s.jsx)(i.a,{href:"/risks/On-Software-Dependencies",children:"On Software Dependencies"}),"."]}),"\n",(0,s.jsx)(i.h3,{id:"5-networking--security",children:"5. Networking / Security"}),"\n",(0,s.jsxs)(i.p,{children:["There are plenty of ",(0,s.jsx)(i.a,{href:"/tags/Complexity-Risk",children:"Complexity Risk"})," perils in ",(0,s.jsx)(i.em,{children:"anything"})," to do with networked code, chief amongst them being error handling and (again) ",(0,s.jsx)(i.a,{href:"/risks/On-Protocols",children:"protocol evolution"}),"."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Threat"}),": In the case of security considerations, exploits ",(0,s.jsx)(i.em,{children:"thrive"})," on the complexity of your code, and the weaknesses that occur because of it.  In particular, Schneier's Law says, never implement your own cryptographic scheme:"]}),"\n",(0,s.jsxs)(i.blockquote,{children:["\n",(0,s.jsxs)(i.p,{children:["\"Anyone, from the most clueless amateur to the best cryptographer, can create an algorithm that he himself can't break. It's not even hard. What is hard is creating an algorithm that no one else can break, even after years of analysis.\" - ",(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Bruce_Schneier#Cryptography",children:"Bruce Schneier, 1998"})]}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["Luckily, most good languages include cryptographic libraries that you can include to mitigate these ",(0,s.jsx)(i.a,{href:"/tags/Complexity-Risk",children:"Complexity Risks"})," from your own code-base."]}),"\n",(0,s.jsxs)(i.p,{children:["This is a strong argument for the use of libraries.  But when should you use a library and when should you code-your-own?  This is covered further in the section on ",(0,s.jsx)(i.a,{href:"/risks/On-Software-Dependencies",children:"On Software Dependencies"}),"."]}),"\n",(0,s.jsx)(i.h3,{id:"6--the-pursuit-of-perfection",children:"6.  The Pursuit Of Perfection"}),"\n",(0,s.jsxs)(i.p,{children:["Complexity arises in software projects in a number of different ways.  Sometimes, a quick-and-dirty solution is a better option than one that deals with every corner-case but adds excessively to the complexity budget.  Aside from ",(0,s.jsx)(i.em,{children:"bragging rights"}),", no-one is interested in having a large codebase:"]}),"\n",(0,s.jsxs)(i.blockquote,{children:["\n",(0,s.jsx)(i.p,{children:"\u201cMeasuring programming progress by lines of code is like measuring aircraft building progress by weight.\u201d - Bill Gates"}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["The size of your codebase, the amount of code, the number of modules, the interconnectedness of the modules and how well-factored the code is all contribute to ",(0,s.jsx)(i.a,{href:"/tags/Complexity-Risk",children:"Complexity Risk"}),"."]}),"\n",(0,s.jsxs)(i.admonition,{title:"Anecdote Corner",type:"tip",children:[(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Knight_Capital_Group#2012_stock_trading_disruption",children:"In 2012, Knight Capital Group"}),", lost $440 million in 45 minutes because of a software deployment error caused by legacy code and unnecessary complexity.  Knight was deploying new trading software designed to handle their market-making operations and made use of ",(0,s.jsx)(i.a,{href:"/tags/Configuration-Management",children:"Feature Flags"})," to enable or disable versions of their code. However, during deployment, they neglected to properly unflag some of the old functionality in one of the servers."]}),(0,s.jsxs)(i.p,{children:["The old code, known internally as \u201cPower Peg,\u201d (unused for eight years) was essentially a ticking time bomb. Instead of simplifying the system by ",(0,s.jsx)(i.a,{href:"/tags/Refactoring",children:"removing dead code"}),", they had layered new features on top of it."]}),(0,s.jsx)(i.p,{children:"When the new deployment went live in started buying and selling millions of shares at lightning speed, generating massive unintended trades. Within minutes, Knight's system had created enormous market disruptions, and by the time the error was caught, the firm had incurred $440 million of losses."})]})]})}function d(e={}){const{wrapper:i}={...(0,n.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},55315:(e,i,t)=>{t.d(i,{A:()=>s});const s=t.p+"assets/images/complexity-risk1-abe6e8d953f82bfef665053bca59e4ac.svg"},64576:(e,i,t)=>{t.d(i,{A:()=>s});const s=t.p+"assets/images/complexity-risk2-8c37feb9e217eb4c9392920c52d82e72.svg"},28453:(e,i,t)=>{t.d(i,{R:()=>o,x:()=>a});var s=t(96540);const n={},r=s.createContext(n);function o(e){const i=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),s.createElement(r.Provider,{value:i},e.children)}}}]);