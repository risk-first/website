"use strict";(self.webpackChunkrf_website=self.webpackChunkrf_website||[]).push([[4537],{331:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/dimensions-2-d00b42e24e12713a7361cfbf1dad21cc.png"},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var i=n(96540);const s={},a=i.createContext(s);function o(e){const t=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:t},e.children)}},29309:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/mazes-ef852e7b6b0a747941109b311bf84eaf.png"},36674:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/dimensions-3-7e9611841480cbceeb761089c0f629fb.png"},42562:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/dimensions-65f9e4d11a4f005f3372aac5042f4143.png"},63969:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/fill-journey-65c78bb48ac8a928a2f0900aa7e161d8.png"},67718:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/transport-5fce5fd07ab8a82512f1699bbbe14b01.png"},74462:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"estimating/Analogies","title":"Analogies","description":"Part of the \'Estimating\' Risk-First Track. Analogies for the problems of estimating.","source":"@site/docs/estimating/Analogies.md","sourceDirName":"estimating","slug":"/estimating/Analogies","permalink":"/estimating/Analogies","draft":false,"unlisted":false,"editUrl":"https://github.com/risk-first/website/blob/master/docs/estimating/Analogies.md","tags":[{"inline":false,"label":"Estimating","permalink":"/tags/Estimating"}],"version":"current","sidebarPosition":5,"frontMatter":{"title":"Analogies","description":"Part of the \'Estimating\' Risk-First Track. Analogies for the problems of estimating.","featured":{"class":"bg1","element":"<image-artifact imgsrc=\\"/public/templates/risk-first/posts/knot.svg\\">Analogies</image-artifact>"},"tags":["Estimating"],"sidebar_position":5,"tweet":"yes"},"sidebar":"tutorialSidebar","previous":{"title":"Fractals","permalink":"/estimating/Fractals"},"next":{"title":"Fixing Scrum","permalink":"/estimating/Fixing-Scrum"}}');var s=n(74848),a=n(28453);const o={title:"Analogies",description:"Part of the 'Estimating' Risk-First Track. Analogies for the problems of estimating.",featured:{class:"bg1",element:'<image-artifact imgsrc="/public/templates/risk-first/posts/knot.svg">Analogies</image-artifact>'},tags:["Estimating"],sidebar_position:5,tweet:"yes"},r="Analogies",l={},h=[{value:"Connecting The Dots",id:"connecting-the-dots",level:2},{value:"Journeys + Cabinets = Mazes?",id:"journeys--cabinets--mazes",level:2},{value:"Mazes + Fractals = Transport Networks?",id:"mazes--fractals--transport-networks",level:2},{value:"Metcalfe&#39;s Law",id:"metcalfes-law",level:3},{value:"Exploring vs. Road-Laying",id:"exploring-vs-road-laying",level:3},{value:"Moving On",id:"moving-on",level:2}];function c(e){const t={a:"a",blockquote:"blockquote",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"analogies",children:"Analogies"})}),"\n",(0,s.jsxs)(t.p,{children:["So far, this track of articles has tried to bring the problems of estimating software projects into focus by identifying different ",(0,s.jsx)(t.em,{children:"estimation domains"})," and analogies for each domain.  Let's recap:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"Fill-The-Bucket",children:"Fill-The-Bucket"}),":  This is the easiest domain to work in.   All tasks are similar and uncorrelated.  We can ",(0,s.jsx)(t.em,{children:"extrapolate"})," to figure out how much time the next ",(0,s.jsx)(t.em,{children:"n"})," units will take to do."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"Kitchen-Cabinet",children:"Kitchen Cabinet"}),":  In this domain, there is ",(0,s.jsx)(t.em,{children:"hidden work"}),".  We don't know how much there might be.  If we can break down tasks into smaller units, then by the ",(0,s.jsx)(t.em,{children:"law of averages"})," and the ",(0,s.jsx)(t.em,{children:"central limit theorem"}),", we can apply some statistics to figure out when we might finish."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"Journeys",children:"Journeys"}),":  In this domain, work is heterogeneous and interconnected.  Different parts depend on each other, and a failure in one part might mean going back to the drawing board entirely.  The way to estimate in this domain is to ",(0,s.jsx)(t.em,{children:"know the landscape"})," and to build in ",(0,s.jsx)(t.em,{children:"buffers"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.a,{href:"Fractals",children:"Fractals"}),":  In this domain, ",(0,s.jsx)(t.a,{href:"/risks/Process-Risk#4-bureaucratic-creep",children:"Parkinson's Law"})," is king.  There is always more work to be done.  The best thing we can do is try and apply ourselves to the ",(0,s.jsx)(t.em,{children:"highest value"})," work at any given point, and frequently refer back to reality to find out if we're building the right thing."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Three Dimensions From Fill-The-Bucket",src:n(42562).A+"",width:"1318",height:"448"})}),"\n",(0,s.jsxs)(t.p,{children:["In Risk-First, one of the main messages has been that it's all about your ",(0,s.jsx)(t.a,{href:"/tags/Internal-Model",children:"Internal Model"}),".  If you have a good model of the world, then you're likely to be able to ",(0,s.jsx)(t.a,{href:"/tags/Take-Action",children:"Take Actions"})," in the world that lead you to positions of lower risk."]}),"\n",(0,s.jsx)(t.p,{children:"So the main reason for identifying all these different problem domains for estimation has been to improve that internal model."}),"\n",(0,s.jsx)(t.h2,{id:"connecting-the-dots",children:"Connecting The Dots"}),"\n",(0,s.jsx)(t.p,{children:"Hopefully, you should be able to draw a line through each of these domains and see that there are examples from the world of software development that fit in there.  Rather than understanding estimating as a thing which goes wrong frequently, and throw it out as a tool, you might be able to place your problem in this space, and decide which of these axes caused you the issue."}),"\n",(0,s.jsx)(t.p,{children:"For the rest of this article, I'm going to go out on a limb, and describe, through increasingly preposterous analogies, how we can arrive at an analogy for the top-right of the above diagram.  Now, arguably - that's going to be completely pointless:  we have enough analogies already since we've described each dimension!   However, unlike the other chapters this is going to be a fairly easy ride so just go with it."}),"\n",(0,s.jsx)(t.h2,{id:"journeys--cabinets--mazes",children:"Journeys + Cabinets = Mazes?"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Journey Planning",src:n(63969).A+"",width:"1760",height:"404"})}),"\n",(0,s.jsxs)(t.p,{children:["As we discussed in ",(0,s.jsx)(t.a,{href:"Journeys",children:"Journeys"}),", there are plenty of problems in getting from A to B.  But to help you we have:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Maps"}),": so we can plan our routes via those which already exist, and"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Closeness"}),":  the closer you are to your destination, the nearer you are to done (which is great for walking and driving, but tends to fall down somewhat when we have to wait for buses or make a detour to the airport)."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Journeys Meets Cabinets",src:n(331).A+"",width:"1652",height:"678"})}),"\n",(0,s.jsxs)(t.p,{children:["What happens when you relax those constraints?  If there is ",(0,s.jsx)(t.em,{children:"no map"})," and the ",(0,s.jsx)(t.em,{children:"closeness"})," heuristic isn't available, you're in a maze.   You can't tell how \"done\" you are in a maze by judging your distance to the exit point - you may be heading to a ",(0,s.jsx)(t.a,{href:"/risks/Complexity-Analogies#complexity-dead-ends",children:"Dead End"})," anyway!"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Maze Estimating",src:n(29309).A+"",width:"1756",height:"526"})}),"\n",(0,s.jsx)(t.p,{children:"Software development is littered with dead ends:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"The database you thought would be a good fit, but didn't work."}),"\n",(0,s.jsx)(t.li,{children:"The library you thought would solve your networking problems, but turned out to be unable to work through the firewall."}),"\n",(0,s.jsx)(t.li,{children:"The algorithm that promised to recognise faces in images only works three times out of four."}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["A ",(0,s.jsx)(t.em,{children:"very"}),' famous example of this might be the "Summer Intern Computer Vision" project, outlined by ',(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Seymour_Papert",children:"Seymour Papert"})," in 1966:"]}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:['"The summer vision project is an attempt to use our summer workers effectively in the construction of a significant part of the human visual system" - ',(0,s.jsxs)(t.a,{href:"ftp://publications.ai.mit.edu/ai-publications/pdf/AIM-100.pdf",children:["The Summer Vision Project, ",(0,s.jsx)(t.em,{children:"Seymour Papert"})]})]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:'Maybe this is an unfair (and perhaps apocryphal) example but we\'ve been stuck in the "Computer Vision" maze ever since.'}),"\n",(0,s.jsx)(t.h2,{id:"mazes--fractals--transport-networks",children:"Mazes + Fractals = Transport Networks?"}),"\n",(0,s.jsxs)(t.p,{children:["In a maze, you're trying to get from point A to point B.  However, when we throw ",(0,s.jsx)(t.em,{children:"fractals"})," back into the mix, we're wanting to get to a whole lot of different places, and there is different value in different places."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Mazes Meets Fractals",src:n(36674).A+"",width:"1410",height:"678"})}),"\n",(0,s.jsx)(t.p,{children:"This is a lot like a country-wide transport network:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Large cities are connected together with efficient transport options because people are going to make that journey a lot.  Therefore, these are ",(0,s.jsx)(t.em,{children:"high value"})," routes."]}),"\n",(0,s.jsx)(t.li,{children:"Small, far-away outposts are poorly connected to the rest of the network - maybe by dirt roads or precarious mountain passes."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Transport Networks",src:n(67718).A+"",width:"1752",height:"502"})}),"\n",(0,s.jsx)(t.h3,{id:"metcalfes-law",children:"Metcalfe's Law"}),"\n",(0,s.jsx)(t.p,{children:"The total value of a network is based on the number of people (towns / machines / whatever) it connects.  This means that while connecting small out-of-the-way places might apparently not make sense from a marginal-cost perspective, it may make sense from the perspective of the total value of the network."}),"\n",(0,s.jsx)(t.p,{children:"This is encapsulated in Metcalfe's Law, which says the value of a network is based on the square of it's size:"}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:['"The law has often been illustrated using the example of fax machines: a single fax machine is useless, but the value of every fax machine increases with the total number of fax machines in the network, because the total number of people with whom each user may send and receive documents increases.  Likewise, in social networks, the greater number of users with the service, the more valuable the service becomes to the community. " - ',(0,s.jsxs)(t.a,{href:"https://en.wikipedia.org/wiki/Metcalfe's_law",children:["Metcalfe's Law, ",(0,s.jsx)(t.em,{children:"Wikipedia"})]})]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"exploring-vs-road-laying",children:"Exploring vs. Road-Laying"}),"\n",(0,s.jsxs)(t.p,{children:["Building a transport network starts with ",(0,s.jsx)(t.em,{children:"exploring"}),".  Once a connection is established, then capacity can be addressed with ",(0,s.jsx)(t.em,{children:"engineering"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["It's easy to get these two confused in software and worry up-front about capacity and design decisions, while in reality you're supposed to be exploring the space of the possible.  In essence, this is what ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Donald_Knuth",children:"Donald Knuth"})," is saying with his famous quote:"]}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:['"We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. " -',(0,s.jsxs)(t.a,{href:"https://en.wikipedia.org/wiki/Program_optimization#When_to_optimize",children:["Donald Knuth, ",(0,s.jsx)(t.em,{children:"Wikipedia"})]})]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["So it feels to me that the ",(0,s.jsx)(t.em,{children:"transport network"})," analogy for software development is a good one.  Are you exploring, or are you engineering?  This is a critical distinction for deciding how to work on a project."]}),"\n",(0,s.jsxs)(t.p,{children:["Personally, when in the ",(0,s.jsx)(t.em,{children:"exploring"})," mode, I will focus on proving ideas, lashing classes together.  I know that I'm very likely to delete them, or tear them to pieces at the next revelation.  For this kind of work, I am unlikely to write unit tests - they'll just slow me down.  My code will be full of bugs and technical debt but it doesn't matter if I reach the enlightenment at the end of the maze."]}),"\n",(0,s.jsxs)(t.p,{children:["Conversely, when in the ",(0,s.jsx)(t.em,{children:"engineering"})," mode, I am trying to create software that will survive the rigours of use.  The ideas will have been tested, it's just a case of making the implementation good enough.  Here, I ",(0,s.jsx)(t.em,{children:"will"})," be building tests, considering Single-Points-Of-Failure and assessing bottlenecks."]}),"\n",(0,s.jsx)(t.p,{children:"Turns out, I am not the only person to draw this analogy:"}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:['"Software projects exist on a continuum between the Lewis and Clark expedition, and laying down freeway. Knowing what kind of project you\u2019re on can be the difference between success and failure." - ',(0,s.jsxs)(t.a,{href:"https://www.linkedin.com/pulse/coding-styles-you-lewis-clark-building-interstate-stan-james/",children:["Coding styles: Are you Lewis and Clark or building an interstate?, ",(0,s.jsx)(t.em,{children:"Stan James"})]})]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"moving-on",children:"Moving On"}),"\n",(0,s.jsxs)(t.p,{children:["So I find the ",(0,s.jsx)(t.em,{children:"transport network"})," analogy to be a useful one.  But actually it ties in nicely with where this track goes next."]}),"\n",(0,s.jsxs)(t.p,{children:["Maintaining a transport network is a balancing act.  In an ideal world, every destination would be connected with every other.  In reality, we adopt hub-and-spoke architectures to minimise the cost of maintaining all the connections.   In essence, turning our transport network into some kind of ",(0,s.jsx)(t.em,{children:"hierarchy"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["It's time to look at ",(0,s.jsx)(t.a,{href:"Fixing-Scrum",children:"Fixing Scrum"}),"."]})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);