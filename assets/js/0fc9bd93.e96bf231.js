"use strict";(self.webpackChunkrf_website=self.webpackChunkrf_website||[]).push([[15],{8120:(e,t,s)=>{s.d(t,{A:()=>i});const i=s.p+"assets/images/development_process_code-c64f549b2c35f7fbd546d1626c370814.svg"},25907:(e,t,s)=>{s.d(t,{A:()=>i});const i=s.p+"assets/images/development_process_uat-3d60a7d2db2d67afa7e87c9b7bb9c2f9.svg"},28453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>a});var i=s(96540);const n={},r=i.createContext(n);function o(e){const t=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),i.createElement(r.Provider,{value:t},e.children)}},35714:(e,t,s)=>{s.d(t,{A:()=>i});const i=s.p+"assets/images/development_process_3-2812f172b5decc2d8174e24561c98a2c.svg"},39443:(e,t,s)=>{s.d(t,{A:()=>i});const i=s.p+"assets/images/development_process_2-bb6539823f2fb81b529739a12b76f365.svg"},47576:(e,t,s)=>{s.d(t,{A:()=>i});const i=s.p+"assets/images/development_process_ba-13906b47a9abe2ed6040687731e6b5d1.svg"},50547:(e,t,s)=>{s.d(t,{A:()=>i});const i=s.p+"assets/images/development_process_integration-4c741b100dc7dd29fac6772d94650de8.svg"},59390:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"thinking/Development-Process","title":"Development Process","description":"Why do we even have processes in software development?","source":"@site/docs/thinking/Development-Process.md","sourceDirName":"thinking","slug":"/thinking/Development-Process","permalink":"/thinking/Development-Process","draft":false,"unlisted":false,"editUrl":"https://github.com/risk-first/website/blob/master/docs/thinking/Development-Process.md","tags":[{"inline":false,"label":"Attendant Risk","permalink":"/tags/Attendant-Risk"},{"inline":false,"label":"Meeting Reality","permalink":"/tags/Meeting-Reality"},{"inline":false,"label":"Hidden Risk","permalink":"/tags/Hidden-Risk"}],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Development Process","description":"Why do we even have processes in software development?","featured":{"class":"bg3","element":"<image-artifact imgsrc=\\"/public/templates/risk-first/posts/development.svg\\">Payoff</image-artifact>"},"sidebar_position":3,"tags":["Attendant Risk","Meeting Reality","Hidden Risk"],"redirect_from":["/Development-Process"],"tweet":"yes"},"sidebar":"tutorialSidebar","previous":{"title":"Risk-First Diagrams Explained","permalink":"/thinking/Risk-First-Diagrams"},"next":{"title":"Meeting Reality","permalink":"/thinking/Meeting-Reality"}}');var n=s(74848),r=s(28453);const o={title:"Development Process",description:"Why do we even have processes in software development?",featured:{class:"bg3",element:'<image-artifact imgsrc="/public/templates/risk-first/posts/development.svg">Payoff</image-artifact>'},sidebar_position:3,tags:["Attendant Risk","Meeting Reality","Hidden Risk"],redirect_from:["/Development-Process"],tweet:"yes"},a="Analysing The Development Process",l={},h=[{value:"A &quot;Toy&quot; Process",id:"a-toy-process",level:2},{value:"Can&#39;t We Improve This?",id:"cant-we-improve-this",level:3},{value:"Minimising Risks - Overview",id:"minimising-risks---overview",level:3},{value:"A Much Simpler Process",id:"a-much-simpler-process",level:3},{value:"Applying the Toy Process",id:"applying-the-toy-process",level:2},{value:"Specification",id:"specification",level:3},{value:"Code And Unit Test",id:"code-and-unit-test",level:3},{value:"Integration",id:"integration",level:3},{value:"User Acceptance Test",id:"user-acceptance-test",level:3},{value:"Observations",id:"observations",level:2},{value:"Major Themes",id:"major-themes",level:2}];function d(e){const t={a:"a",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"analysing-the-development-process",children:"Analysing The Development Process"})}),"\n",(0,n.jsxs)(t.p,{children:["In ",(0,n.jsx)(t.a,{href:"A-Simple-Scenario",children:"A Simple Scenario"})," we introduced some terms for talking about risk (such as ",(0,n.jsx)(t.a,{href:"/tags/Attendant-Risk",children:"Attendant Risk"}),", ",(0,n.jsx)(t.a,{href:"/tags/Attendant-Risk",children:"Hidden Risk"})," and the ",(0,n.jsx)(t.a,{href:"/tags/Internal-Model",children:"Internal Model"}),")."]}),"\n",(0,n.jsxs)(t.p,{children:["We've also introduced a notation in the form of ",(0,n.jsx)(t.a,{href:"./Risk-First-Diagrams",children:"Risk-First Diagrams"})," which allows us to represent the ways in which we can change the risks by ",(0,n.jsx)(t.a,{href:"/tags/Take-Action",children:"Taking Action"}),"."]}),"\n",(0,n.jsx)(t.p,{children:'Now, we are going to start applying our new terminology to software.  In the example below, we\'ll look at a "toy" process and use it for developing a new feature on a software project and see how our risk model informs it.'}),"\n",(0,n.jsx)(t.h2,{id:"a-toy-process",children:'A "Toy" Process'}),"\n",(0,n.jsx)(t.p,{children:"Let's ignore for now the specifics of software methodology - we'll come to that later.  For now, let's consider a simple, toy, process for developing software and understand how it works from a risk perspective."}),"\n",(0,n.jsx)(t.p,{children:"Something like the following:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Specification"}),": a new feature is requested somehow, and a business analyst works to specify it."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Code And Unit Test"}),": a developer writes some code and some unit tests."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"Integration"}),": they integrate their code into the code base."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"UAT"}),": they put the code into a User Acceptance Test (UAT) environment and user(s) test it."]}),"\n",(0,n.jsxs)(t.li,{children:["All being well, the code is ",(0,n.jsx)(t.strong,{children:"Released to Production"}),"."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"A Simple Development Process",src:s(78432).A+"",width:"1300",height:"350"})}),"\n",(0,n.jsx)(t.h3,{id:"cant-we-improve-this",children:"Can't We Improve This?"}),"\n",(0,n.jsxs)(t.p,{children:["Is this a ",(0,n.jsx)(t.em,{children:"good"})," process?  Probably, it's not that great: you could add code review, a pilot phase, integration testing, whatever."]}),"\n",(0,n.jsxs)(t.p,{children:["Also, the ",(0,n.jsx)(t.em,{children:"methodology"})," being used might be Waterfall, it might be Agile.  We're not going to commit to specifics at this stage."]}),"\n",(0,n.jsxs)(t.p,{children:["For now though, let's just assume that ",(0,n.jsx)(t.em,{children:"it works for this project"})," and everyone is reasonably happy with it."]}),"\n",(0,n.jsxs)(t.p,{children:["We're just doing some analysis of ",(0,n.jsx)(t.em,{children:"what process gives us"}),", and also why it is that we end up with processes for producing software at all."]}),"\n",(0,n.jsx)(t.h3,{id:"minimising-risks---overview",children:"Minimising Risks - Overview"}),"\n",(0,n.jsxs)(t.p,{children:["I am going to argue that this entire evolved software production process is ",(0,n.jsx)(t.em,{children:"informed by software risk"}),":"]}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["We have ",(0,n.jsx)(t.em,{children:"a business analyst"})," who talks to users and fleshes out the details of the feature properly.   This is to minimize the risk of ",(0,n.jsx)(t.strong,{children:"building the wrong thing"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:["We ",(0,n.jsx)(t.em,{children:"write unit tests"})," to minimize the risk that our code ",(0,n.jsx)(t.strong,{children:"isn't doing what we expected, and that it matches the specifications"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:["We ",(0,n.jsx)(t.em,{children:"integrate our code"})," to minimize the risk that it's ",(0,n.jsx)(t.strong,{children:"inconsistent with the other, existing code on the project"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:["We have ",(0,n.jsx)(t.em,{children:"acceptance testing"})," and quality gates generally to ",(0,n.jsx)(t.strong,{children:"minimize the risk of breaking production"}),", somehow."]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"a-much-simpler-process",children:"A Much Simpler Process"}),"\n",(0,n.jsx)(t.p,{children:"We could skip all those steps above and just do this:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"Developer gets wind of new idea from user, logs onto production and changes some code directly."}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"A Dangerous Development Process",src:s(39443).A+"",width:"800",height:"350"})}),"\n",(0,n.jsx)(t.p,{children:"We can all see this might end in disaster, but why?"}),"\n",(0,n.jsx)(t.p,{children:"Two reasons:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["You're ",(0,n.jsx)(t.a,{href:"/tags/Meeting-Reality",children:"Meeting Reality"})," all-in-one-go:  all of these risks materialize at the same time, and you have to deal with them all at once."]}),"\n",(0,n.jsxs)(t.li,{children:["Because of this, at the point you put code into the hands of your users, your ",(0,n.jsx)(t.a,{href:"/tags/Internal-Model",children:"Internal Model"})," is at its least-developed.  All the ",(0,n.jsx)(t.a,{href:"/tags/Hidden-Risk",children:"Hidden Risks"})," now need to be dealt with at the same time, in production."]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"applying-the-toy-process",children:"Applying the Toy Process"}),"\n",(0,n.jsxs)(t.p,{children:["Although bitter experience has shown that this is a terrible way of delivering software, I want to use Risk-First diagrams and our new terminology to explore exactly why this is the case by examining what happens to ",(0,n.jsx)(t.em,{children:"risk"}),", and specifically look at how our toy process should act to prevent these risks materialising in production and causing maximum harm."]}),"\n",(0,n.jsxs)(t.p,{children:["First, let's consider the unhappy path.  One where, at the outset, we have lots of ",(0,n.jsx)(t.a,{href:"/tags/Hidden-Risk",children:"Hidden Risks"}),".  Let's say a particularly vocal user rings up someone in the office and asks for new ",(0,n.jsx)(t.strong,{children:"Feature X"})," to be added to the software.  It's logged as a new feature request, but:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Unfortunately, this feature once programmed will break an existing ",(0,n.jsx)(t.strong,{children:"Feature Y"}),"."]}),"\n",(0,n.jsx)(t.li,{children:"Implementing the feature will use some api in a library, which contains bugs and have to be coded around."}),"\n",(0,n.jsx)(t.li,{children:"It's going to get misunderstood by the developer too, who is new on the project and doesn't understand how the software is used."}),"\n",(0,n.jsxs)(t.li,{children:["Actually, this functionality is mainly served by ",(0,n.jsx)(t.strong,{children:"Feature Z"}),"..."]}),"\n",(0,n.jsx)(t.li,{children:"which is already there but hard to find."}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Development Process - Exposing Hidden Risks",src:s(35714).A+"",width:"1228",height:"673"})}),"\n",(0,n.jsx)(t.p,{children:"The diagram above shows how this plays out.  As you can see, our truncated, two-step development process exposes us to all the hidden risks in production at the same time and disaster ensues."}),"\n",(0,n.jsxs)(t.p,{children:["Now let's follow our feature through the toy process and see how it meets reality slowly, and the ",(0,n.jsx)(t.a,{href:"/tags/Hidden-Risk",children:"Hidden Risks"})," are exposed in a more benign way."]}),"\n",(0,n.jsx)(t.h3,{id:"specification",children:"Specification"}),"\n",(0,n.jsxs)(t.p,{children:["The first stage of the journey for the feature is that it meets the Business Analyst (BA).  The ",(0,n.jsx)(t.em,{children:"purpose"})," of the BA is to examine new goals for the project and try to integrate them with ",(0,n.jsx)(t.em,{children:"reality as they understand it"}),".  A good BA might take a feature request and vet it against his ",(0,n.jsx)(t.a,{href:"/tags/Internal-Model",children:"Internal Model"}),", saying something like:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:'"This feature doesn\'t belong on the User screen, it belongs on the New Account screen"'}),"\n",(0,n.jsx)(t.li,{children:'"90% of this functionality is already present in the Document Merge Process"'}),"\n",(0,n.jsx)(t.li,{children:'"We need a control on the form that allows the user to select between Internal and External projects"'}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["In the process of doing this, the BA is turning the simple feature request ",(0,n.jsx)(t.em,{children:"idea"})," into a more consistent, well-explained ",(0,n.jsx)(t.em,{children:"specification"})," or ",(0,n.jsx)(t.em,{children:"requirement"})," which the developer can pick up.  But why is this a useful step in our simple methodology?  From the perspective of our ",(0,n.jsx)(t.a,{href:"/tags/Internal-Model",children:"Internal Model"}),", we can say that the BA is responsible for:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Trying to surface ",(0,n.jsx)(t.a,{href:"/tags/Hidden-Risk",children:"Hidden Risks"})]}),"\n",(0,n.jsxs)(t.li,{children:["Trying to evaluate ",(0,n.jsx)(t.a,{href:"/tags/Attendant-Risk",children:"Attendant Risks"})," and make them clear to everyone on the project."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"BA Specification: exposing Hidden Risks as soon as possible",src:s(47576).A+"",width:"1094",height:"601"})}),"\n",(0,n.jsxs)(t.p,{children:["In surfacing these risks, there is another outcome:  while ",(0,n.jsx)(t.strong,{children:"Feature X"}),' might be flawed as originally presented, the BA can "evolve" it into a specification and tie it down sufficiently to reduce the risks.   The BA does all this by simply ',(0,n.jsx)(t.em,{children:"thinking about it"}),", ",(0,n.jsx)(t.em,{children:"talking to people"})," and ",(0,n.jsx)(t.em,{children:"writing stuff down"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["This process of evolving the feature request into a requirement is the BA's job.  From our Risk-First perspective, it is ",(0,n.jsxs)(t.em,{children:["taking an idea and making it ",(0,n.jsx)(t.a,{href:"/tags/Meeting-Reality",children:"Meet Reality"})]}),".  Not the ",(0,n.jsx)(t.em,{children:"full reality"})," of production (yet), but something more limited."]}),"\n",(0,n.jsx)(t.h3,{id:"code-and-unit-test",children:"Code And Unit Test"}),"\n",(0,n.jsxs)(t.p,{children:["The next stage for our feature, ",(0,n.jsx)(t.strong,{children:"Feature X"})," is that it gets coded and some tests get written.  Let's look at how our ",(0,n.jsx)(t.a,{href:"/tags/Goal",children:"Goal"})," meets a new reality:   this time it's the reality of a pre-existing codebase, which has it's own internal logic."]}),"\n",(0,n.jsxs)(t.p,{children:["As the developer begins coding the feature in the software, they will start with an ",(0,n.jsx)(t.a,{href:"/tags/Internal-Model",children:"Internal Model"})," of the software, and how the code fits into it.  But, in the process of implementing it, they are likely to learn about the codebase, and their ",(0,n.jsx)(t.a,{href:"/tags/Internal-Model",children:"Internal Model"})," will develop."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Coding Process:  exposing more hidden risks as you code",src:s(8120).A+"",width:"1026",height:"646"})}),"\n",(0,n.jsxs)(t.p,{children:["At this point, let's review the visual grammar of the diagram above.  Here, we're showing how the balance of risks will change if the developer ",(0,n.jsx)(t.a,{href:"/tags/Take-Action",children:"Takes Action"})," and writes some code.  On the left, we have the current state of the world, on the right is the anticipated state ",(0,n.jsx)(t.em,{children:"after"})," taking the action."]}),"\n",(0,n.jsxs)(t.p,{children:["The round-cornered rectangles represent our ",(0,n.jsx)(t.a,{href:"/tags/Internal-Model",children:"Internal Model"}),", and these contain our view of ",(0,n.jsx)(t.a,{href:"/tags/Risk",children:"Risk"}),", whether the risks we face right now, or the ",(0,n.jsx)(t.a,{href:"/tags/Attendant-Risk",children:"Attendant Risks"})," expected after taking the action.  We're not at the stage where taking this actions is ",(0,n.jsx)(t.em,{children:"completing"})," the goal.  In fact, arguably, we're facing ",(0,n.jsx)(t.em,{children:"worse"})," risks after taking action than before, since we now have ",(0,n.jsx)(t.em,{children:"development difficulties"})," to contend with... but at least we have uncovered these risks that were previously hidden."]}),"\n",(0,n.jsx)(t.p,{children:'Beneath the internal models we are also showing real-world tangible artifacts.  That is, the physical change we would expect to see as a result of taking action.  In the diagram above, the action will result in "New Code" being added to the project, needed for the next steps of the development process.'}),"\n",(0,n.jsx)(t.h3,{id:"integration",children:"Integration"}),"\n",(0,n.jsx)(t.p,{children:"Integration is where we run all the tests on the project, and compile the code in a clean environment, collecting together the work from the whole development team."}),"\n",(0,n.jsx)(t.p,{children:"So, within this example process, this stage is about meeting a new reality: the clean build."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Integration testing exposes Hidden Risks before you get to production",src:s(50547).A+"",width:"804",height:"646"})}),"\n",(0,n.jsxs)(t.p,{children:["As shown in the diagram above, at this stage we might discover the ",(0,n.jsx)(t.a,{href:"/tags/Hidden-Risk",children:"Hidden Risk"})," that we'd break ",(0,n.jsx)(t.strong,{children:"Feature Y"})]}),"\n",(0,n.jsx)(t.h3,{id:"user-acceptance-test",children:"User Acceptance Test"}),"\n",(0,n.jsxs)(t.p,{children:["Next, User Acceptance Testing (UAT) is where our new feature meets another reality: ",(0,n.jsx)(t.em,{children:"actual users"}),".   I think you can see how the process works by now.  We're just flushing out yet more ",(0,n.jsx)(t.a,{href:"/tags/Hidden-Risk",children:"Hidden Risks"}),"."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"UAT - putting tame users in front of your software is be tter than real ones, where the risk is higher ",src:s(25907).A+"",width:"1227",height:"646"})}),"\n",(0,n.jsx)(t.h2,{id:"observations",children:"Observations"}),"\n",(0,n.jsxs)(t.p,{children:["Here are a few quick observations about managing risk which you are revealed both by this toy software process and also our previous example of ",(0,n.jsx)(t.a,{href:"A-Simple-Scenario",children:"The Dinner Party"}),":"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"/tags/Take-Action",children:"Taking Action"})," is the ",(0,n.jsx)(t.em,{children:"only"})," way to create change in the world."]}),"\n",(0,n.jsxs)(t.li,{children:["It's also the only way we can ",(0,n.jsx)(t.em,{children:"learn"})," about the world, adding to our ",(0,n.jsx)(t.a,{href:"/tags/Internal-Model",children:"Internal Model"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:["In this case, we discover a ",(0,n.jsx)(t.a,{href:"/tags/Hidden-Risk",children:"Hidden Risk"}),": the user's difficulty in finding the feature."]}),"\n",(0,n.jsxs)(t.li,{children:["In return, we can ",(0,n.jsx)(t.em,{children:"expect"})," the process of performing the UAT to delay our release (this is an attendant schedule risk)."]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"major-themes",children:"Major Themes"}),"\n",(0,n.jsxs)(t.p,{children:["So, what does this kind of Risk-First analysis tell us about ",(0,n.jsx)(t.em,{children:"development processes in general"}),"?  Below are four conclusions you can take away from the chapter, but which are all major themes of Risk-First that we'll be developing later:"]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"First"}),", the people who set up the development process ",(0,n.jsx)(t.em,{children:"didn't know"})," about these ",(0,n.jsx)(t.em,{children:"exact"})," risks, but they knew the ",(0,n.jsx)(t.em,{children:"shape that the risks take"}),'.   The process builds "nets" for the different kinds of ',(0,n.jsx)(t.a,{href:"/tags/Hidden-Risk",children:"Hidden Risks"})," without knowing exactly what they are.  In order to build these nets, we have to be able to categorise the types of risk we face.  This is something we'll look at in the ",(0,n.jsx)(t.a,{href:"/risks/Start",children:"Risks"})," part of Risk-First."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Second"}),", are these really risks, or are they ",(0,n.jsx)(t.em,{children:"problems we just didn't know about"}),"?  I am using the terms interchangeably, to a certain extent.  Even when you know you have a problem, it's still a risk to your deadline until it's solved.  So, when does a risk become a problem?  Is a problem still just a schedule-risk, or cost-risk?  We'll come back to this question soon."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Third"}),", the real take-away from this is that all these risks exist because we don't know 100% how reality is.  We don't (and can't) have a perfect view of the universe and how it'll develop.   Reality is reality, ",(0,n.jsx)(t.em,{children:"the risks just exist in our head"}),".  Again, this is a theme we'll develop later in Risk-First."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Fourth"}),", hopefully you might be able to see from the above that really ",(0,n.jsx)(t.em,{children:"all this work is risk management"})," and ",(0,n.jsx)(t.em,{children:"all work is testing ideas against reality"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["In the next section, we're going to look at the concept of ",(0,n.jsx)(t.a,{href:"Meeting-Reality",children:"Meeting Reality"})," in a bit more depth."]})]})}function c(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},78432:(e,t,s)=>{s.d(t,{A:()=>i});const i=s.p+"assets/images/development_process_1-a22d6d7ac9654774bc87edd90fb037f3.svg"}}]);